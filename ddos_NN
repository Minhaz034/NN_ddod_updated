import numpy as np

import pandas as pd

from sklearn import preprocessing
import matplotlib.pyplot as plt
from sklearn.preprocessing import Imputer
plt.style.use('fivethirtyeight')



df = pd.read_csv('DrDoS_DNS_upgraded2.csv')
#df = pd.read_csv('MSSQL.csv')
#df = pd.read_csv('NetBIOS.csv')
#df=pd.read_csv('mosaic.csv') //change y to binary
#df=pd.read_csv('CICID1.csv')
#df = df.convert_objects(convert_numeric=True)
#df.drop_duplicates(inplace = True)
df.replace([np.inf, -np.inf], np.nan)



X=df.iloc[:, :-1 ].to_numpy()
imputer= Imputer(missing_values="NaN" , strategy="mean" ,axis=0)
imputer = imputer.fit(X[: ,0:3])
X[: ,0:3] = imputer.transform(X[: ,0:3])

# Get all of the rows from the last column
y = df.iloc[:,-1].to_numpy()
#print(sum(y))
'''
from sklearn.preprocessing import LabelEncoder
labelencoder= LabelEncoder()
y = labelencoder.fit_transform(y)
'''
'''
for i in range(len(y)):
    if y[i]=="BENIGN":
        y[i]=0
    else:
        y[i]=1
'''        
from sklearn.preprocessing import LabelEncoder
labelencoder= LabelEncoder()
y = labelencoder.fit_transform(y)

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state = 5)

from sklearn.preprocessing import StandardScaler
scale_X= StandardScaler()
X_train= scale_X.fit_transform(X_train)
X_test= scale_X.transform(X_test)




#classifier:\
import keras
from keras.models import Sequential
from keras.layers import Dense

classifier=Sequential()

classifier.add(Dense(12, activation='relu', input_shape=(3, )))
classifier.add(Dense(15, activation='relu'))
classifier.add(Dense(17, activation='relu'))
classifier.add(Dense(10, activation='relu'))
classifier.add(Dense(1, activation='sigmoid' ))

classifier.compile(optimizer='adam' , loss='binary_crossentropy', metrics=['accuracy'])
classifier.fit(X_train ,y_train, batch_size=57 ,epochs=5, validation_split= 0.2)

'''
from sklearn.metrics import  confusion_matrix
y_pred=classifier.predict(X_test)
y_pred=(y_pred> 0.5)
'''




#plot:
from sklearn.metrics import classification_report, confusion_matrix,accuracy_score
pred_train = classifier.predict(X_train)
pred_train  = [1 if y>=0.5 else 0 for y in pred_train] #Threshold
print(classification_report(y_train ,pred_train ))
print('Confusion Matrix: \n',confusion_matrix(y_train,pred_train))
print()
print('Accuracy: ', accuracy_score(y_train,pred_train))
print()

#accuracy_score
y_pred = classifier.predict(X_test)
y_pred  = [1 if y>=0.5 else 0 for y in y_pred] #Threshold
print(classification_report(y_test ,y_pred ))
print('Confusion Matrix: \n',confusion_matrix(y_test,y_pred))
print()
print('Accuracy: ', accuracy_score(y_test,y_pred))
print()

cm = confusion_matrix(y_test , y_pred)
